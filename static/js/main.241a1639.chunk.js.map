{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","REVERSE_FIELD_VALUE","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","prepearedGoods","sort","goods1","goods2","localeCompare","length","reverse","getPreparedGoods","isSortFieldReversed","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SACpBC,GAAsB,EAiCrB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAASF,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAnCR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAc,YAAOD,GAE3B,GAAIL,EACF,OAAQA,GACN,KAAKL,EACHW,EAAeC,MAAK,SAACC,EAAQC,GAAT,OAClBD,EAAOE,cAAcD,MAGvB,MAEF,KAAKb,EACHU,EAAeC,MAAK,SAACC,EAAQC,GAAT,OAClBD,EAAOG,OAASF,EAAOE,UAGzB,MAEF,QACE,OAAOL,EAQb,OAJIJ,GACFI,EAAeM,UAGVN,EAOcO,CAAiBnB,EACpC,CAAEM,YAAWE,eAETY,EAAsBd,GAAaE,EAOzC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYjB,IAAcL,IAC9BuB,QAAS,kBAAMjB,EAAaN,IAJ9B,iCASA,wBACEqB,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYjB,IAAcJ,IAC9BsB,QAAS,kBAAMjB,EAAaL,IAJ9B,4BASA,wBACEoB,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYf,IAAeL,IAC/BqB,QAAS,kBAAMf,GAAeD,IAJhC,qBAQCY,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBArCjBjB,EAAa,SACbE,EAAcN,IAiCR,sBAWJ,6BACGO,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC5GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.241a1639.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\nconst REVERSE_FIELD_VALUE = false;\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SORT_FIELD_NAME: (\n        prepearedGoods.sort((goods1, goods2) => (\n          goods1.localeCompare(goods2)\n        ))\n      );\n        break;\n\n      case SORT_FIELD_LENGTH: (\n        prepearedGoods.sort((goods1, goods2) => (\n          goods1.length - goods2.length\n        ))\n      );\n        break;\n\n      default:\n        return prepearedGoods;\n    }\n  }\n\n  if (isReversed) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(REVERSE_FIELD_VALUE);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReversed });\n\n  const isSortFieldReversed = sortField || isReversed;\n\n  const handleResetClick = () => {\n    setSortField('');\n    setIsReversed(REVERSE_FIELD_VALUE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD_NAME })}\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': isReversed === REVERSE_FIELD_VALUE })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n        {isSortFieldReversed && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => handleResetClick()}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}